{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/jerrijung/Documents/jeremy-nextJS/nextjs-dashboard/app/lib/helperFunctions.ts"],"sourcesContent":["import { ACFPost, FeaturedImage } from \"../types/postTypes\";\n\nexport const getImageGallery = (post: ACFPost): FeaturedImage[] => {\n  console.log(\"the post look for the images: \", post)\n  const images: FeaturedImage[] = [];\n\n  for (let i = 1; i <= 4; i++) {\n    const key = `imageGallery${i}` as keyof ACFPost;\n    const image = post[key];\n    \n    if (image) {\n      images.push(image as FeaturedImage);\n    }\n  }\n\n  return images;\n};\n\nexport const formatDate = (dateString?: string) => {\n  if (!dateString) return \"\";\n  return new Intl.DateTimeFormat(\"en-US\", {\n    dateStyle: \"long\",\n  }).format(new Date(dateString));\n};\n\n\nexport function translateSlugs( slug: string ): string {\n  let newSlug: string | undefined;\n  switch( slug ) {\n    case 'objects': \n      newSlug = 'things';\n      break;\n    case 'sounds':\n      newSlug = 'sound';\n      break;\n    case 'videos':\n      newSlug = 'video';\n      break;  \n    case 'webprojects':\n      newSlug = 'webportfolio';\n      break;\n    default:\n      newSlug = slug;\n  }\n  return newSlug;\n}\n\n"],"names":[],"mappings":";;;;;AAEO,MAAM,kBAAkB,CAAC;IAC9B,QAAQ,GAAG,CAAC,kCAAkC;IAC9C,MAAM,SAA0B,EAAE;IAElC,IAAK,IAAI,IAAI,GAAG,KAAK,GAAG,IAAK;QAC3B,MAAM,MAAM,CAAC,YAAY,EAAE,GAAG;QAC9B,MAAM,QAAQ,IAAI,CAAC,IAAI;QAEvB,IAAI,OAAO;YACT,OAAO,IAAI,CAAC;QACd;IACF;IAEA,OAAO;AACT;AAEO,MAAM,aAAa,CAAC;IACzB,IAAI,CAAC,YAAY,OAAO;IACxB,OAAO,IAAI,KAAK,cAAc,CAAC,SAAS;QACtC,WAAW;IACb,GAAG,MAAM,CAAC,IAAI,KAAK;AACrB;AAGO,SAAS,eAAgB,IAAY;IAC1C,IAAI;IACJ,OAAQ;QACN,KAAK;YACH,UAAU;YACV;QACF,KAAK;YACH,UAAU;YACV;QACF,KAAK;YACH,UAAU;YACV;QACF,KAAK;YACH,UAAU;YACV;QACF;YACE,UAAU;IACd;IACA,OAAO;AACT"}},
    {"offset": {"line": 50, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 56, "column": 0}, "map": {"version":3,"sources":["file:///Users/jerrijung/Documents/jeremy-nextJS/nextjs-dashboard/app/lib/api/fetch.ts"],"sourcesContent":["import { Entry, WordPressAPIResponse } from \"@/app/types/cvEntryTypes\";\nimport {\n  Post,\n  PostResponse,\n  PostCategory,\n  Product,\n  ProductResponse,\n} from \"@/app/types/postTypes\";\nimport { translateSlugs } from \"../helperFunctions\";\n\nconst API_URL =\n  process.env.WORDPRESS_GRAPHQL_ENDPOINT || \"https://wp.jeremywy.com/graphql\";\n\n// local use functions\nfunction transformExpoData(json: WordPressAPIResponse): Entry[] {\n  return json.data.cvEntries.nodes.map((item) => ({\n    title: item.title,\n    type: item.cvEntryFields.type[0] ?? \"undefined\", // Use ?? instead of |\n    date: item.cvEntryFields.date,\n    location: item.cvEntryFields.location,\n    description: item.cvEntryFields.description,\n    renderDate: item.cvEntryFields.renderDate,\n    link: item.cvEntryFields.link,\n  }));\n}\n\nexport async function getPosts() {\n  const res = await fetch(API_URL, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      query: `\n        query {\n          posts {\n            nodes {\n              id\n              title\n              excerpt\n              slug\n              date\n              \n            }\n          }\n        }\n      `,\n    }),\n    next: { revalidate: 60 }, // ISR (Incremental Static Regeneration)\n  });\n\n  const json = await res.json();\n  // console.log(\"did we content\", json.data.posts.nodes)\n  return json.data.posts.nodes;\n}\n\n// use to get immix-tracks\nexport async function getImmixTracks(): Promise<Post[]> {\n  const res = await fetch(API_URL, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      query: `\n        query GetPostsByCategory {\n          posts(\n            where: { categoryName: \"immix-tracks\" }\n          ) {\n            nodes {\n              id\n              title\n              excerpt\n              slug\n              date\n              tags {\n                nodes {\n                  id\n                  name\n                  slug\n                }\n              }\n              featuredImage {\n                node {\n                  sourceUrl\n                  altText\n                  mediaDetails {\n                    sizes {\n                      width\n                      height\n                    }\n                  }\n                }\n              }\n              acfPosts {\n                date\n                description\n                immixInternalLink\n              }\n              \n            }\n          }\n        }\n      `,\n    }),\n    next: { revalidate: 60 },\n  });\n\n  const json: PostResponse = await res.json();\n\n  // Ensure acfPosts.date exists before sorting\n  return json.data.posts.nodes.sort((a, b) => {\n    const dateA = new Date(a.acfPosts.date || \"1970-01-01\");\n    const dateB = new Date(b.acfPosts.date || \"1970-01-01\");\n\n    return dateB.getTime() - dateA.getTime();\n  });\n}\n\nexport async function getPostsByCategory(category: string): Promise<Post[]> {\n  const res = await fetch(API_URL, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      query: `\n        query GetPostsByCategory {\n          posts(\n            where: { categoryName: \"${category}\" }\n          ) {\n            nodes {\n              id\n              title\n              excerpt\n              slug\n              date\n              tags {\n                nodes {\n                  id\n                  name\n                  slug\n                }\n              }\n              featuredImage {\n                node {\n                  sourceUrl\n                  altText\n                  mediaDetails {\n                    sizes {\n                      width\n                      height\n                    }\n                  }\n                }\n              }\n              acfPosts {\n                date\n                description\n              }\n            }\n          }\n        }\n      `,\n    }),\n    next: { revalidate: 60 },\n  });\n\n  const json: PostResponse = await res.json();\n\n  // Ensure acfPosts.date exists before sorting\n  return json.data.posts.nodes.sort((a, b) => {\n    const dateA = new Date(a.acfPosts.date || \"1970-01-01\");\n    const dateB = new Date(b.acfPosts.date || \"1970-01-01\");\n\n    return dateB.getTime() - dateA.getTime();\n  });\n}\n\nexport async function getPostBySlug(slug: string): Promise<Post> {\n  const res = await fetch(API_URL, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      query: `\n        query GetPostBySlug($slug: String!) {\n          postBy(slug: $slug) {\n            id\n            title\n            excerpt \n            slug\n            date\n            featuredImage {\n              node {\n                sourceUrl\n                altText\n                mediaDetails {\n                  sizes {\n                    width\n                    height\n                  }\n                }\n              }\n            }\n            acfPosts {\n              date\n              youtubeId\n              description\n              soundcloudId\n              webportfolioLink\n              customVideoSource  \n              soundUrl\n              imageGallery1 {\n                node {\n                  sourceUrl\n                  altText\n                  mediaDetails {\n                    width\n                    height\n                  }\n                }  \n              }\n              imageGallery2 {\n                node {\n                  sourceUrl\n                  altText\n                  mediaDetails {\n                    width\n                    height\n                  }\n                }  \n              }\n              imageGallery3 {\n                node {\n                  sourceUrl\n                  altText\n                  mediaDetails {\n                    width\n                    height\n                  }\n                }  \n              }\n              imageGallery4 {\n                node {\n                  sourceUrl\n                  altText\n                  mediaDetails {\n                    width\n                    height\n                  }\n                }  \n              }\n            }\n          }\n        }\n      `,\n      variables: { slug },\n    }),\n    next: { revalidate: 60 },\n  });\n\n  const json = await res.json();\n  console.log(\"lkfds\", json);\n  return json.data.postBy || null;\n}\n\nexport async function getCVEntries() {\n  const res = await fetch(API_URL, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      query: `\n        query GetCVEntries {\n          cvEntries {\n            nodes {\n              id\n              title\n              cvEntryFields{\n                date\n                type\n                renderDate\n                location\n                description\n                link\n              }\n \n            }\n          }\n        }\n      `,\n    }),\n    next: { revalidate: 60 }, // ISR (Incremental Static Regeneration)\n  });\n\n  const json = await res.json();\n  // console.log(\"did we content\", json.data.cvEntries.nodes);\n  const expoData: Entry[] = transformExpoData(json);\n  return expoData;\n}\n\n// get category info, use getPostsByCategory to get posts\nexport async function getCategoryBySlug(slug: string): Promise<PostCategory> {\n  const newSlug = translateSlugs(slug);\n  const res = await fetch(API_URL, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      query: `\n        query GetCategoryBySlug($newSlug: ID!) {\n          category(id: $newSlug, idType: SLUG) {\n            id\n            name\n            slug\n            description\n          }\n        }\n      `,\n      variables: { newSlug },\n    }),\n    next: { revalidate: 60 }, // ISR (Incremental Static Regeneration)\n  });\n\n  const json = await res.json();\n  return json.data;\n}\n\n// use to get shop products\n\nexport async function getProducts(): Promise<Product[]> {\n  const res = await fetch(API_URL, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      query: `\n        query GetProducts {\n          products( where: { orderby: { field: DATE, order: DESC } }) {\n            nodes {\n              id\n              slug\n              name\n              ... on SimpleProduct {\n                price(format: RAW)\n                regularPrice(format: RAW)\n                salePrice(format: RAW)\n                \n              }\n              date\n              description\n              featuredImage {\n                cursor\n                node {\n                  altText\n                  caption\n                  file\n                  filePath\n                  sourceUrl\n                }\n              }\n            }\n          }\n        }\n      `,\n    }),\n    next: { revalidate: 60 },\n  });\n\n  const json: ProductResponse = await res.json();\n  return json.data.products.nodes;\n}\n\n// get product by slug\nexport async function getProductBySlug(slug: string): Promise<Product> {\n  const newSlug = translateSlugs(slug);\n  const res = await fetch(API_URL, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      query: `\n        query GetProduct($slug: [String!]) {\n          products(\n            where: { slugIn: $slug, orderby: { field: DATE, order: DESC } }\n          ) {\n            nodes {\n              id\n              slug\n              name\n              ... on SimpleProduct {\n                price(format: RAW)\n                regularPrice(format: RAW)\n                salePrice(format: RAW)\n              }\n              date\n              description\n              featuredImage {\n                node {\n                  altText\n                  caption\n                  sourceUrl\n                }\n              }\n              galleryImages {\n                nodes {\n                  altText\n                  caption\n                  sourceUrl\n                }\n              }\n              shortDescription\n            }\n          }\n        }\n      `,\n      variables: { slug: newSlug },\n    }),\n    next: { revalidate: 60 }, // ISR (Incremental Static Regeneration)\n  });\n\n  const raw = await res.text(); // log raw text\n  // console.log(\"RAW response:\", raw);\n  let json;\n  try {\n    json = JSON.parse(raw);\n  } catch (err) {\n    throw new Error(\"Failed to parse JSON. Raw response:\\n\" + raw);\n  }\n  return json.data.products?.nodes?.at(0) ?? null;\n\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 490, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 496, "column": 0}, "map": {"version":3,"sources":["file:///Users/jerrijung/Documents/jeremy-nextJS/nextjs-dashboard/app/lib/Cart.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/lib/Cart.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/lib/Cart.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,oXAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA"}},
    {"offset": {"line": 504, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 510, "column": 0}, "map": {"version":3,"sources":["file:///Users/jerrijung/Documents/jeremy-nextJS/nextjs-dashboard/app/lib/Cart.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/lib/Cart.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/lib/Cart.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,oXAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA"}},
    {"offset": {"line": 518, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 524, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 528, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 534, "column": 0}, "map": {"version":3,"sources":["file:///Users/jerrijung/Documents/jeremy-nextJS/nextjs-dashboard/app/lib/HtmlParse.tsx"],"sourcesContent":["import parse from \"html-react-parser\";\n\nexport default function HTMLParse({ html }: { html: string }) {\n  return <div>{parse(html)}</div>;\n}"],"names":[],"mappings":";;;;AAAA;AAAA;;;AAEe,SAAS,UAAU,EAAE,IAAI,EAAoB;IAC1D,qBAAO,6WAAC;kBAAK,CAAA,GAAA,qSAAA,CAAA,UAAK,AAAD,EAAE;;;;;;AACrB"}},
    {"offset": {"line": 551, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 556, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/ui/shop.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"buyButton\": \"shop-module__GtLAIq__buyButton\",\n  \"galleryWrapper\": \"shop-module__GtLAIq__galleryWrapper\",\n  \"header\": \"shop-module__GtLAIq__header\",\n  \"imageWrapper\": \"shop-module__GtLAIq__imageWrapper\",\n  \"main\": \"shop-module__GtLAIq__main\",\n  \"price\": \"shop-module__GtLAIq__price\",\n  \"productContainer\": \"shop-module__GtLAIq__productContainer\",\n  \"productsWrapper\": \"shop-module__GtLAIq__productsWrapper\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 566, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 572, "column": 0}, "map": {"version":3,"sources":["file:///Users/jerrijung/Documents/jeremy-nextJS/nextjs-dashboard/app/shop/%5Bslug%5D/page.tsx"],"sourcesContent":["import { getProductBySlug } from \"@/app/lib/api/fetch\";\nimport Cart from \"@/app/lib/Cart\";\nimport Image from \"next/image\";\nimport HTMLParse from \"@/app/lib/HtmlParse\";\nimport shopStyles from \"@/app/ui/shop.module.css\";\n\ntype Params = Promise<{ slug: string }>;\n\nexport async function generateMetadata({ params }: { params: Params }) {\n  const { slug } = await params;\n  const product = await getProductBySlug(slug);\n\n  return {\n    title: product.name,\n    description:\n      product.shortDescription || product.description?.slice(0, 160),\n    openGraph: {\n      title: product.name,\n      description:\n        product.shortDescription || product.description?.slice(0, 160),\n      url: `${process.env.NEXT_PUBLIC_SITE_URL}/shop/${slug}`,\n      images: [\n        {\n          url: product.images?.[0]?.node.sourceUrl || \"/default-og.png\",\n          alt: product.name,\n        },\n      ],\n    },\n    twitter: {\n      card: \"summary_large_image\",\n      title: product.name,\n      description:\n        product.shortDescription || product.description?.slice(0, 160),\n      images: [product.images?.[0]?.node.sourceUrl || \"/default-og.png\"],\n    },\n  };\n}\n\nexport default async function ProductDetail({ params }: { params: Params }) {\n  const { slug } = await params;\n  const product = await getProductBySlug(slug);\n  console.log(\"product: \", product);\n\n  return (\n    <main className={shopStyles.main}>\n      <h1 className={shopStyles.header}>{product.name}</h1>\n      <HTMLParse html={product.description}/>\n      <h2>{`$${product.price}`}</h2>\n      <div className={shopStyles.galleryWrapper}>\n        {product.galleryImages &&\n          product.galleryImages.nodes.map((image, idx) => (\n            <div\n              className={shopStyles.imageWrapper}\n              key={`${product.name}-image-${idx}`}\n            >\n              <Image\n                src={image.sourceUrl}\n                fill\n                alt={image.altText || `${product.name}-image-${idx}`}\n                style={{ objectFit: \"contain\", height: \"100%\", width: \"100%\" }}\n              />\n            </div>\n          ))}\n      </div>\n      {/* <CheckoutButton text={'add item to cart'}/> */}\n      {product.id && <Cart productId={product.id} />}\n    </main>\n  );\n}\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;AAIO,eAAe,iBAAiB,EAAE,MAAM,EAAsB;IACnE,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM;IACvB,MAAM,UAAU,MAAM,CAAA,GAAA,0HAAA,CAAA,mBAAgB,AAAD,EAAE;IAEvC,OAAO;QACL,OAAO,QAAQ,IAAI;QACnB,aACE,QAAQ,gBAAgB,IAAI,QAAQ,WAAW,EAAE,MAAM,GAAG;QAC5D,WAAW;YACT,OAAO,QAAQ,IAAI;YACnB,aACE,QAAQ,gBAAgB,IAAI,QAAQ,WAAW,EAAE,MAAM,GAAG;YAC5D,KAAK,GAAG,QAAQ,GAAG,CAAC,oBAAoB,CAAC,MAAM,EAAE,MAAM;YACvD,QAAQ;gBACN;oBACE,KAAK,QAAQ,MAAM,EAAE,CAAC,EAAE,EAAE,KAAK,aAAa;oBAC5C,KAAK,QAAQ,IAAI;gBACnB;aACD;QACH;QACA,SAAS;YACP,MAAM;YACN,OAAO,QAAQ,IAAI;YACnB,aACE,QAAQ,gBAAgB,IAAI,QAAQ,WAAW,EAAE,MAAM,GAAG;YAC5D,QAAQ;gBAAC,QAAQ,MAAM,EAAE,CAAC,EAAE,EAAE,KAAK,aAAa;aAAkB;QACpE;IACF;AACF;AAEe,eAAe,cAAc,EAAE,MAAM,EAAsB;IACxE,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM;IACvB,MAAM,UAAU,MAAM,CAAA,GAAA,0HAAA,CAAA,mBAAgB,AAAD,EAAE;IACvC,QAAQ,GAAG,CAAC,aAAa;IAEzB,qBACE,6WAAC;QAAK,WAAW,gIAAA,CAAA,UAAU,CAAC,IAAI;;0BAC9B,6WAAC;gBAAG,WAAW,gIAAA,CAAA,UAAU,CAAC,MAAM;0BAAG,QAAQ,IAAI;;;;;;0BAC/C,6WAAC,wHAAA,CAAA,UAAS;gBAAC,MAAM,QAAQ,WAAW;;;;;;0BACpC,6WAAC;0BAAI,CAAC,CAAC,EAAE,QAAQ,KAAK,EAAE;;;;;;0BACxB,6WAAC;gBAAI,WAAW,gIAAA,CAAA,UAAU,CAAC,cAAc;0BACtC,QAAQ,aAAa,IACpB,QAAQ,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,oBACtC,6WAAC;wBACC,WAAW,gIAAA,CAAA,UAAU,CAAC,YAAY;kCAGlC,cAAA,6WAAC,4PAAA,CAAA,UAAK;4BACJ,KAAK,MAAM,SAAS;4BACpB,IAAI;4BACJ,KAAK,MAAM,OAAO,IAAI,GAAG,QAAQ,IAAI,CAAC,OAAO,EAAE,KAAK;4BACpD,OAAO;gCAAE,WAAW;gCAAW,QAAQ;gCAAQ,OAAO;4BAAO;;;;;;uBAN1D,GAAG,QAAQ,IAAI,CAAC,OAAO,EAAE,KAAK;;;;;;;;;;YAY1C,QAAQ,EAAE,kBAAI,6WAAC,mHAAA,CAAA,UAAI;gBAAC,WAAW,QAAQ,EAAE;;;;;;;;;;;;AAGhD"}},
    {"offset": {"line": 686, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 697, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 697, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}